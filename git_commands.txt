Here are commands utilized in git version control.

1. To create RSA key pair.
=> ssh-keygen -t rsa -b 2048 -C "<comment>"

2. To clone a repository via ssh. After adding the proper key pair.
=> git clone git@gitlab.com:<username>/<repo name or directory>

3. git status: This tells you your branch, what has changed and the whole state.

4. To have your remot repo added to your local repo
=> git remote add origin https://gitlab.com/samuelcj310/my-project.git

5. To change branch
=> git branch -M main

6. To add files that are untracked
=> git add <file name> | git add . | git add -A

7. To commit changes.
=> git commit -m <commit message>

8. To remove a file from commited files
=> git rm --cached <file name>

9. To see local repository history
=> git log

10. To rename a branch
=> git branch -m <name>

11. To create a new local repositoy
=> git init

12. To add your username for tracking of commit, push and pull.
=> git config --global user.name <Your Name>

13. To set a local repo to point to a remote repo
=> git remote add origin git@gitlab.com:samuelcj310/test_project.git

14. To set the local branch as the branch on remote
=> git push --set-upstream origin <branch name>

15. To delete a branch
=> git branch -d <branch name>

16. To update a branch when there are other updates not in your local. you use Rebase (-r)
=> git push -r

17. from web IDE and Bash: When there are changes from different source on the same line or file or part of code. It causes a MERGE CONFLICT that needs to be fixed using
=> git push -r ##(rebase)
=> then edid the marked conflict session then resolve conflict (This is done in editor)

then:
18. To continue after merge conflict has been resolved.
=> git rebase --continue

Other available options can be:

	Resolve all conflicts manually, mark them as resolved with
	hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
	hint: You can instead skip this commit: run "git rebase --skip".
	hint: To abort and get back to the state before "git rebase", run "git rebase --abort".

19. The .gitignorefile ==> used to specify files or folders that should not be included in the remote repo from your local push. eg build folders, .idea folder, node modules,etc. Just by listing them in the file:  filename; foldername/*



 


