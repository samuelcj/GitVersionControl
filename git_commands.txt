Here are commands utilized in git version control.

1. To create RSA key pair.
=> ssh-keygen -t rsa -b 2048 -C "<comment>"

2. To clone a repository via ssh. After adding the proper key pair.
=> git clone git@gitlab.com:<username>/<repo name or directory>

3. git status: This tells you your branch, what has changed and the whole state.

4. To have your remote repo added to your local repo
=> git remote add origin https://gitlab.com/samuelcj310/my-project.git

5. To change branch
=> git branch -M main

6. To add files that are untracked
=> git add <file name> | git add . | git add -A

7. To commit changes.      (HEAD in git simply means the last commit)
=> git commit -m <commit message>

8. To remove a file from committed files
=> git rm --cached <file name>

9. To see local repository history
=> git log

10. To rename a branch
=> git branch -m <name>

11. To create a new local repository
=> git init

12. To add your username for tracking of commit, push and pull.
=> git config --global user.name <Your Name>

13. To set a local repo to point to a remote repo
=> git remote add origin git@gitlab.com:samuelcj310/test_project.git

14. To set the local branch as the branch on remote
=> git push --set-upstream origin <branch name>

15. To delete a branch
=> git branch -d <branch name>

16. To update a branch when there are other updates not in your local. you use Rebase (-r)
=> git push -r

17. from web IDE and Bash: When there are changes from different source on the same line or file or part of code. It causes a MERGE CONFLICT that needs to be fixed using
=> git push -r ##(rebase)
=> then edit the marked conflict session then resolve conflict (This is done in editor)

then:
18. To continue after merge conflict has been resolved.
=> git rebase --continue

Other available options can be:

	Resolve all conflicts manually, mark them as resolved with
	hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
	hint: You can instead skip this commit: run "git rebase --skip".
	hint: To abort and get back to the state before "git rebase", run "git rebase --abort".

19. The .gitignorefile ==> used to specify files or folders that should not be included in the remote repo from your local push. eg build folders, .idea folder, node modules,etc. Just by listing them in the file:  filename; foldername/*

20. For files already being tracked this wont have effect. So to remove them from cached files we run the cache command below
=> git rm -r --cached <file or folder names>

21. To save work in progress for a branch and save for later. So we can easily checkout and return back to work.
=> git stash >>>>> to save changes in progress
=> git stash pop >>>>>>>> to retrieve the saved changes.

22. Going back in history.
=> git log >>>>>>>>> shows our commit history
=> git checkout <commit hash> >>>>>> to go back to that commit state in time

23. To revert a git commit and delete the changes from previous commit still present on the local before push to remote
=> git reset --hard HEAD~n    >>> where n= how many commits you want to undo. usually 1. and HEAD means that we are referring to most recent commit

24. To  rever a git commit but not delete the changes made. i.e we can still see modified before the commit was made.
=> git reset HEAD~1   OR  => git reset --soft HEAD~1

25. To merge a new commit into an old commit. i.e. creating a commit inside an already previous last one.
=> git commit --amend

26. To revert a commit that has already been pushed to the remote repository. We combine two commands
	1. We delete it locally
=> git reset --hard HEAD~1
	2. Then we push it to the remote with a force
=> git push --force

27. To not delete a previous commit but just override it we use the override commit. It is a re-verse kind of commit
=> git revert <commit hash>    >>>>>>>>>> Then you push to the remote so it takes effect.

28. To merge commits so that two branches either main or not can be in sync. Just like merge request. We use:
=> git merge <origin/source branch name>   >>>>>>>>> Note, you are to run this command from the destination branch

29. To clone a repo now with http using token we use this command.
=> git clone https://<user name>:<authentication token>@github.com/<repo name>.git

eg: git clone https://samuelcj:ghp_2aU******dlsfhlwfdjjf@github.com/BuildToolsandPackageManagers.git 

30. To have a repo inside a repo. We need to add the repo as a submodule, so that git can track internal changes and sync them.
=> git submodule add <url of the internal repo> <internal or sub-repo name>
e.g:  git submodule add git@github.com:samuelcj/GitVersionControl.git GitVersionControl

31. To know thr remote repo that your local is connected to.
=> git remote get-url origin

32. 